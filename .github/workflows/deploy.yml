name: Deploy Backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force_full_deploy:
        description: 'Force full deployment'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      infra-changed: ${{ steps.changes.outputs.infra }}
      app-changed: ${{ steps.changes.outputs.app }}
      deploy-needed: ${{ steps.changes.outputs.deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            infra:
              - 'cloudformation/**'
              - 'deploy-*.yml'
            app:
              - 'app/**'
              - 'requirements.txt'
              - 'Dockerfile'
            deploy:
              - 'cloudformation/**'
              - 'app/**'
              - 'requirements.txt'
              - 'Dockerfile'
              - '.github/workflows/**'

  lint-and-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install linting tools
        run: |
          pip install flake8 black isort bandit safety
          pip install cfn-lint
      - name: Python code formatting
        run: |
          black app/
      - name: Python import sorting
        run: |
          isort app/
      - name: Python linting
        run: |
          flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
      - name: Security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json --skip B101,B104 || true
          bandit -r app/ --skip B101,B104
      - name: Dependency security check
        run: |
          safety check --json --output safety-report.json || true
          safety check
      - name: CloudFormation linting
        run: |
          cfn-lint cloudformation/**/*.yml
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  deploy-infrastructure:
    needs: [detect-changes, lint-and-validate]
    if: needs.detect-changes.outputs.infra-changed == 'true' || github.event.inputs.force_full_deploy == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      ecr-uri: ${{ steps.deploy-infra.outputs.ecr-uri }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy infrastructure
        id: deploy-infra
        run: |
          # Create ECR repository first
          aws ecr describe-repositories --repository-names d-devops-challenge-ecr-repo || \
          aws ecr create-repository --repository-name d-devops-challenge-ecr-repo
          
          # Package and deploy network stack
          aws cloudformation package \
            --template-file cloudformation/nested/network/network.yml \
            --s3-bucket ${{ secrets.CF_BUCKET }} \
            --output-template-file packaged-network.yml
          
          aws cloudformation deploy \
            --template-file packaged-network.yml \
            --stack-name d-devops-challenge-network \
            --parameter-overrides Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
          
          # Wait for network stack to be completely ready
          aws cloudformation wait stack-deploy-complete \
            --stack-name d-devops-challenge-network
          
          # Get ECR URI
          ECR_URI=$(aws ecr describe-repositories --repository-names d-devops-challenge-ecr-repo --query 'repositories[0].repositoryUri' --output text)
          echo "ecr-uri=$ECR_URI" >> $GITHUB_OUTPUT

  test:
    needs: [deploy-infrastructure, lint-and-validate]
    if: needs.detect-changes.outputs.app-changed == 'true' || github.event.inputs.force_full_deploy == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest httpx
      - name: Run tests
        run: |
          python -m pytest app/ -v || echo "No tests found, skipping"

  build:
    needs: [deploy-infrastructure, test]
    if: needs.detect-changes.outputs.app-changed == 'true' || github.event.inputs.force_full_deploy == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push image
        id: build-image
        env:
          ECR_REPOSITORY: d-devops-challenge-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ECR_REGISTRY=${{ needs.deploy-infrastructure.outputs.ecr-uri }}
          ECR_REGISTRY=${ECR_REGISTRY%/*}
          
          # Build and push image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-application:
    needs: [deploy-infrastructure, build]
    if: needs.detect-changes.outputs.deploy-needed == 'true' || github.event.inputs.force_full_deploy == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy application stack
        run: |
          # Package and deploy compute stack
          aws cloudformation package \
            --template-file cloudformation/nested/compute/compute.yml \
            --s3-bucket ${{ secrets.CF_BUCKET }} \
            --output-template-file packaged-compute.yml
          
          aws cloudformation deploy \
            --template-file packaged-compute.yml \
            --stack-name d-devops-challenge-compute \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
              ImageURI=${{ needs.build.outputs.image-uri }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
          
          # Wait for compute stack to be completely ready
          aws cloudformation wait stack-deploy-complete \
            --stack-name d-devops-challenge-compute
          
          # Deploy monitoring stack
          aws cloudformation package \
            --template-file cloudformation/nested/monitoring/monitoring.yml \
            --s3-bucket ${{ secrets.CF_BUCKET }} \
            --output-template-file packaged-monitoring.yml
          
          aws cloudformation deploy \
            --template-file packaged-monitoring.yml \
            --stack-name d-devops-challenge-monitoring \
            --parameter-overrides Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
          
          # Wait for monitoring stack to be completely ready
          aws cloudformation wait stack-deploy-complete \
            --stack-name d-devops-challenge-monitoring
      
      - name: Get application URL
        run: |
          URL=$(aws cloudformation describe-stacks \
            --stack-name d-devops-challenge-compute \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerURL`].OutputValue' \
            --output text)
          echo "ðŸš€ Application deployed at: $URL"
          echo "ðŸ“‹ Test endpoints:"
          echo "  Health: $URL/health"
          echo "  Login: $URL/login (POST with {\"username\": \"demo\", \"password\": \"password123\"})"
          echo "  Items: $URL/items (GET with Bearer token)"
