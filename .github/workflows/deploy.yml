name: Deploy Backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - d
        - s
        - p
      force_full_deploy:
        description: 'Force full deployment'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: ${{ github.event.inputs.environment || 'd' }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      infra-changed: ${{ steps.changes.outputs.infra }}
      app-changed: ${{ steps.changes.outputs.app }}
      deploy-needed: ${{ steps.changes.outputs.deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            infra:
              - 'cloudformation/**'
            app:
              - 'app/**'
              - 'docker/**'
            deploy:
              - 'cloudformation/**'
              - 'app/**'
              - 'docker/**'
              - '.github/workflows/**'

  lint-and-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install linting tools
        run: |
          pip install flake8 black isort bandit safety
          pip install cfn-lint
      - name: Python code formatting
        run: |
          black --config app/pyproject.toml app/
      - name: Python import sorting
        run: |
          isort --settings-path app/pyproject.toml app/
      - name: Python linting
        run: |
          flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
      - name: Security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json --skip B101,B104 || true
          bandit -r app/ --skip B101,B104
      - name: Dependency security check
        run: |
          safety check --json --output safety-report.json || true
          safety check
      - name: CloudFormation linting
        run: |
          cfn-lint cloudformation/**/*.yml --ignore-checks W1020,W2001,W3002
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  deploy-infrastructure:
    needs: [detect-changes, lint-and-validate]
    if: needs.detect-changes.outputs.infra-changed == 'true' || github.event.inputs.force_full_deploy == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      ecr-uri: ${{ steps.deploy-infra.outputs.ecr-uri }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy infrastructure
        id: deploy-infra
        run: |
          STACK_NAME="${{ env.ENVIRONMENT }}-merck-devops-challenge-main"
          
          echo "Using S3 bucket: ${{ secrets.CF_BUCKET }}"
          echo "AWS Region: ${{ env.AWS_REGION }}"
          
          if ! aws s3 ls s3://${{ secrets.CF_BUCKET }}/ --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "S3 bucket not accessible. Creating bucket..."
            aws s3 mb s3://${{ secrets.CF_BUCKET }} --region ${{ env.AWS_REGION }}
          fi
          
          BUCKET="${{ secrets.CF_BUCKET }}"
          REGION="${{ env.AWS_REGION }}"
          aws cloudformation package --template-file cloudformation/main.yml --s3-bucket "$BUCKET" --output-template-file packaged-main.yml --region "$REGION"
          
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE state, deleting it first..."
            aws cloudformation delete-stack --stack-name $STACK_NAME
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
            echo "Stack deleted successfully"
          fi
          
          aws cloudformation deploy \
            --template-file packaged-main.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides file://cloudformation/parameters/${{ env.ENVIRONMENT }}.json \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset || {
            echo "Deployment failed. Getting stack events..."
            aws cloudformation describe-stack-events --stack-name $STACK_NAME --max-items 20
            exit 1
          }
          
          echo "Waiting for stack deployment to complete..."
          aws cloudformation wait stack-create-complete --stack-name $STACK_NAME || \
          aws cloudformation wait stack-update-complete --stack-name $STACK_NAME
          
          ECR_URI=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ECRRepositoryURI`].OutputValue' \
            --output text)
          echo "ecr-uri=$ECR_URI" >> $GITHUB_OUTPUT

  test:
    needs: [deploy-infrastructure, lint-and-validate]
    if: needs.detect-changes.outputs.app-changed == 'true' || github.event.inputs.force_full_deploy == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r app/requirements.txt
          pip install pytest httpx
      - name: Run tests
        run: |
          python -m pytest app/ -v || echo "No tests found, skipping"

  build:
    needs: [deploy-infrastructure, test]
    if: needs.detect-changes.outputs.app-changed == 'true' || github.event.inputs.force_full_deploy == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push image
        id: build-image
        env:
          ECR_REPOSITORY: ${{ env.ENVIRONMENT }}-merck-devops-challenge-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ECR_REGISTRY=${{ needs.deploy-infrastructure.outputs.ecr-uri }}
          ECR_REGISTRY=${ECR_REGISTRY%/*}
          
          docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-application:
    needs: [deploy-infrastructure, build]
    if: needs.detect-changes.outputs.deploy-needed == 'true' || github.event.inputs.force_full_deploy == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy application stack
        run: |
          STACK_NAME="${{ env.ENVIRONMENT }}-merck-devops-challenge-main"
          
          BUCKET="${{ secrets.CF_BUCKET }}"
          REGION="${{ env.AWS_REGION }}"
          aws cloudformation package --template-file cloudformation/main.yml --s3-bucket "$BUCKET" --output-template-file packaged-main.yml --region "$REGION"
          
          TEMP_PARAM_FILE=$(mktemp)
          jq --arg imageUri "${{ needs.build.outputs.image-uri }}" '. + [{"ParameterKey": "ImageURI", "ParameterValue": $imageUri}]' cloudformation/parameters/${{ env.ENVIRONMENT }}.json > $TEMP_PARAM_FILE
          
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE state, deleting it first..."
            aws cloudformation delete-stack --stack-name $STACK_NAME
            aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
            echo "Stack deleted successfully"
          fi
          
          aws cloudformation deploy \
            --template-file packaged-main.yml \
            --stack-name $STACK_NAME \
            --parameter-overrides file://$TEMP_PARAM_FILE \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset
          
          echo "Waiting for application update to complete..."
          aws cloudformation wait stack-update-complete --stack-name $STACK_NAME
          
          rm -f $TEMP_PARAM_FILE
          
          if [ "${{ env.ENVIRONMENT }}" = "d" ]; then
            USER_POOL_ID=$(aws cloudformation describe-stacks \
              --stack-name $STACK_NAME \
              --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' \
              --output text)
            
            SECRET_VALUE=$(aws secretsmanager get-secret-value \
              --secret-id "${{ env.ENVIRONMENT }}-merck-devops-challenge-demo-user" \
              --query 'SecretString' --output text)
            
            USERNAME=$(echo $SECRET_VALUE | jq -r '.username')
            PASSWORD=$(echo $SECRET_VALUE | jq -r '.password')
            
            aws cognito-idp admin-create-user \
              --user-pool-id $USER_POOL_ID \
              --username $USERNAME \
              --user-attributes Name=email,Value=$USERNAME Name=email_verified,Value=true \
              --temporary-password TempPass123! \
              --message-action SUPPRESS || echo "Demo user already exists"
            
            aws cognito-idp admin-set-user-password \
              --user-pool-id $USER_POOL_ID \
              --username $USERNAME \
              --password $PASSWORD \
              --permanent || echo "Password already set"
            
            echo "Demo user created: $USERNAME"
            echo "Password stored in Secrets Manager: ${{ env.ENVIRONMENT }}-merck-devops-challenge-demo-user"
          fi
      
      - name: Get application URL
        run: |
          STACK_NAME="${{ env.ENVIRONMENT }}-merck-devops-challenge-main"
          URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApplicationURL`].OutputValue' \
            --output text)
          echo "🚀 Application deployed at: $URL"
          echo "📋 Test endpoints:"
          echo "  Health: $URL/health"
          echo "  Login: $URL/login (POST with {\"username\": \"demo\", \"password\": \"password123\"})"
          echo "  Items: $URL/items (GET with Bearer token)"